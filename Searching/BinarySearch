1. A binary search or half-interval search algorithm finds the position of a specified value (the input "key") within a
sorted array. In each step, the algorithm compares the input key value with the key value of the middle element of the array.
If the keys match, then a matching element has been found so its index, or position, is returned. Otherwise,
if the sought key is less than the middle element's key, then the algorithm repeats its action on the sub-array to the
left of the middle element or, if the input key is greater, on the sub-array to the right.
If the remaining array to be searched is reduced to zero, then the key cannot be found in the array and a special
"Not found" indication is returned.

2.Every iteration eliminates half of the remaining possibilities. This makes binary searches very efficient - even
for large collections.

3.Binary search requires a sorted collection. Also, binary searching can only be applied to a collection that allows
random access (indexing).

4.Worst case performance: O(log n) and Best case performance: O(1)

Qstn
-check if the input is sorted or not??